// Code generated by go-bindata.
// sources:
// bindata.go
// liveness_std.sh
// readiness_std.sh
// run
// run_tools.sh
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493020129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _liveness_stdSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x91\xbd\x8e\xdb\x30\x10\x84\x7b\x3e\xc5\x04\xaa\x2d\xfa\x02\xa4\x71\x1b\xe7\xea\x00\x29\x83\x14\x94\x34\x96\xd7\xe2\x8f\xc0\x5d\x19\x97\x07\xf2\x3b\xa4\xf7\x8b\x05\x34\xee\x7c\x5b\x2d\x77\xf0\xcd\x2c\xb8\xdd\x17\xbf\x69\xf5\x83\x64\xcf\x7c\xc5\x10\xf4\xec\x5c\x87\x23\xcd\x08\x56\xd0\xb0\xc6\x30\xf2\x5c\xe2\xc4\x0a\x1d\xab\xac\x86\x53\xa9\x88\x72\x65\xa6\x2a\xd6\x5a\x06\xa6\xbe\x31\x68\x13\x23\x26\x66\xcc\x97\xfb\xbf\xda\x2c\xee\x37\x54\xda\x56\x33\x2b\xb1\xef\x5d\x87\xd7\x87\x62\x8d\xd4\x0b\x17\xc3\xd0\xa8\x94\x5a\x00\xe7\x87\xfb\xfd\x06\x49\x6b\x64\x62\xb6\xc6\xd1\x3e\x03\xdf\x97\x60\xc5\x44\xc3\x55\x16\x93\xb9\x01\xa7\x52\xd5\xee\x37\xd7\x3d\xba\xe5\xc2\x18\x99\x91\x18\x63\x49\xa8\x0c\x93\x34\xbc\xc7\x6b\xa9\x68\x59\x92\x4f\xa5\xa6\xa0\x97\x92\xa1\xc4\xd9\x6c\x3d\x78\xbf\x6c\x03\x6b\xa6\x51\x7b\x29\x7e\x2a\xa3\xfa\x4d\x59\x77\xf3\x26\x13\xfd\x5a\xa6\x9d\x5a\x30\xaa\x77\x1d\x7e\x2c\xda\xe3\xf8\x1d\x63\xc9\x27\x99\x5d\x87\x5d\x6b\x2d\x48\x66\xd5\x83\xeb\xd0\xb7\x72\x1d\x5a\x7d\xec\xff\xb3\xfd\xd7\xe1\x7d\x08\xf0\x8d\xe3\xe7\x0b\x18\x4b\x4a\x21\x4f\x07\xfc\xf6\xdb\xfe\xc5\x87\x75\x8d\x32\x06\x93\x92\x1f\x57\xfa\x70\xe9\xf5\xfc\xe7\x49\x49\x16\x93\x10\x8f\x8c\xe1\xef\x2f\x8e\x25\x4f\x7a\xc0\xcb\xb7\xa7\x6e\x92\x58\x36\x7b\x4a\x5f\x9d\xe3\x9b\x18\xf6\xee\x7f\x00\x00\x00\xff\xff\x95\x2e\xa5\x56\x00\x02\x00\x00")

func liveness_stdShBytes() ([]byte, error) {
	return bindataRead(
		_liveness_stdSh,
		"liveness_std.sh",
	)
}

func liveness_stdSh() (*asset, error) {
	bytes, err := liveness_stdShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "liveness_std.sh", size: 512, mode: os.FileMode(493), modTime: time.Unix(1492675208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readiness_stdSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xd1\x6e\xdb\x36\x14\x86\xef\xf9\x14\x7f\x25\x2f\xd8\x2e\x64\xc9\x1d\x0a\xb4\x1e\xb2\xc1\xb0\xbd\x65\x98\x9b\x04\x89\x7b\x15\x04\x2e\x2d\x1e\xcb\x8c\x28\x52\x20\x29\xa5\x9d\x97\xc7\xc9\x3b\xec\x3e\x2f\x36\x50\x4e\xe4\xb4\x33\xaf\xcc\x73\x0e\xbf\xf3\x9f\xdf\x47\xf1\x9b\xb4\x71\x36\x5d\x4b\x9d\x92\x6e\xb1\xe6\x6e\xcb\x58\x8c\x19\x69\x4d\xb0\xc4\x85\xd4\xe4\x1c\x6a\x6b\xd6\x54\xa1\x90\x16\x6b\x72\xe5\x1d\x09\x78\xa9\x40\x5a\x50\xdd\xe8\xd2\xa3\x34\xda\x5b\xa3\x14\x59\xd2\xd0\x4f\x8f\x16\x82\x34\xc8\xa2\x54\xdc\x76\xb5\x4f\x8f\xa8\x8c\xf7\x1c\x1b\x63\xc9\xd5\x4f\xff\x5a\xa7\xc8\x0e\x59\x8c\x05\xb5\x64\xb9\x76\x54\xf3\xb2\x24\xac\xbf\x16\x45\x87\x51\x14\x7e\xc0\xd4\x75\x07\xe0\x3e\xc8\x70\x77\x54\x7a\xb2\x70\xa4\x5a\x94\x3c\x54\xb5\x64\x09\x4e\x6a\x02\x15\xda\xd1\x5e\xac\x85\x33\x55\x10\xa1\x69\x18\xc6\x61\x31\xaa\xa7\x47\x6c\xc9\xbf\x9a\x6b\xe8\xb6\x30\x05\x94\x2c\x0a\x42\xa3\x05\x59\x04\x2b\x20\xf7\xd4\x5e\x93\x1e\x82\xc5\xb8\x0c\x5c\xdd\x61\xe8\x8b\xf4\xa8\x48\x20\x83\x20\x1b\x3a\xb9\x26\xcf\x03\x11\x13\x2d\x2c\xa1\x25\x2b\x24\x59\xb4\x52\xa1\x22\x25\x08\xb9\xd1\x9e\x4b\xdd\x4d\xd6\x78\xf0\x16\xfe\x8e\x34\x39\x4f\xf8\xd1\x91\x6d\x65\x4e\x07\x3f\xe9\x27\x16\xe3\x77\x63\x51\x91\x85\xd4\x1b\x69\x2b\xee\xee\x8c\x86\x23\x6c\xbd\xaf\xc7\x69\x5a\x36\x6b\xb2\x9a\x3c\xb9\xa1\x34\xa9\x30\xb9\x4b\x1b\x47\x36\x29\x1a\x29\x28\xad\x8d\x48\x9c\xe7\x9e\x5c\xca\x62\xcc\x4b\x37\xc4\x6c\x1a\x34\x6c\x64\xc1\x62\x24\x07\x39\x6e\xcc\x62\x0c\xc3\x61\x31\xc2\xe9\xdd\xe9\xe6\x1d\x3f\x47\x01\xfa\x42\xf9\xe1\x06\xe4\xa6\xaa\xb8\x16\x63\xdc\xa4\x4d\x36\x4a\x79\x5d\x2b\x99\x73\x2f\x8d\xee\xd6\xe9\xb5\xc9\xb7\xfd\x33\xa9\xa5\x97\x5c\xcd\x48\xf1\xaf\xd7\x94\x1b\x2d\xdc\x18\xa3\x77\x7d\xde\xcb\x8a\x4c\xe3\xfb\xd4\x5b\xc6\x98\xdc\xe0\x06\xc9\xdf\x88\x06\x67\xcb\xe5\xe5\xea\xf2\xe2\x6a\x19\xe1\xf6\x17\xf8\x2d\x69\x06\xf4\xc1\xd3\xf7\xd9\xfb\x8c\x6d\xe4\xeb\x17\x1f\x27\xe7\x93\x3f\xe6\x1f\xe7\xe7\xcb\xd5\xd1\xc7\xc7\xf2\x81\x33\xea\x38\xdd\x6d\xb0\xeb\x33\x0f\xcf\xe8\x37\x7b\xf8\xd5\x7c\x32\xfb\xf3\x7c\x7e\x7d\xbd\xba\x38\x5f\xbd\x22\x7d\xdf\x64\x8f\x39\xd6\xea\xa0\xf6\x7f\xc8\xe9\xd9\x7c\xfa\xd7\xea\xd3\xd5\xe2\x9b\x59\xe7\x93\xc5\xf2\x2c\x44\x4f\xa3\xe7\x3d\x50\x26\xe7\x6a\x6b\x9c\x1f\x0f\x76\x9d\xc6\xc1\xee\x08\xe4\x21\x62\xc0\x7d\x41\x1e\x89\x0b\x46\xf6\x9c\x08\x27\xbf\x22\x15\xd4\xa6\xba\x51\x8a\xb1\x38\xc6\x35\xaf\x6a\x15\x16\x56\x10\x1a\x27\x75\x81\xe9\xa7\xab\x05\xee\xa5\xdf\x76\xcb\xd7\x65\x58\xdc\x0d\x31\xbd\x98\xcd\x4f\x3f\xe7\x8d\x55\x48\x2a\x8c\x32\x24\x6e\x81\xe4\x1e\xd1\x0f\xbb\x50\xba\x0a\xa5\x0f\x11\xa2\xc1\xee\xd0\xf2\x21\x42\x62\x0e\x3d\x3f\xb3\x38\x38\x70\xf3\xf2\xff\x06\x64\x84\xa4\x20\xbc\xcd\x32\x9c\x9c\x7c\x17\x57\x84\x9f\x3f\x7c\xc0\xed\x8b\x29\x31\xf6\x5f\x63\xc6\x62\x52\x8e\xfa\xfb\x88\xc5\xc1\xdc\xe7\xdb\xe0\xb7\xce\x6a\xa7\x88\x6a\x64\xc3\x77\xf8\x07\x9e\x94\x26\x8f\xde\x3f\x1c\xd6\xeb\x5b\x4f\x5e\x00\xff\x05\x00\x00\xff\xff\x21\x86\x19\x4b\x2c\x05\x00\x00")

func readiness_stdShBytes() ([]byte, error) {
	return bindataRead(
		_readiness_stdSh,
		"readiness_std.sh",
	)
}

func readiness_stdSh() (*asset, error) {
	bytes, err := readiness_stdShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readiness_std.sh", size: 1324, mode: os.FileMode(493), modTime: time.Unix(1492675208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _run = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x51\x6f\xdb\x3c\x12\x7c\xd7\xaf\x98\xca\x42\xdb\x00\xb1\x9c\xe2\xfa\x50\xdc\x41\x0f\x4e\xac\xa6\x6e\x13\x4b\xb0\x94\xf6\x72\x6d\xa1\xd2\xd2\xda\x62\x2d\x93\x3a\x92\xb2\xe3\x06\xf9\xef\x1f\x48\xd5\x89\x83\x7e\xdf\x43\xa0\x78\x39\x1c\xee\x0e\x97\xb3\x83\x17\xa3\x05\x17\xa3\x05\xd3\xb5\xe7\x79\x03\xe4\x35\x29\x02\xb3\x7f\x58\xd2\x0e\xba\x5b\x98\x86\x0c\x27\x0d\x2e\x60\x6a\xae\xa1\x4b\xc5\x5b\x03\x53\x33\xe3\x80\x35\x53\x15\x8c\x44\xc9\x4c\x59\x63\xc7\x4d\x2d\x3b\x83\xb5\x90\x3b\x2e\x56\x30\x35\x61\xc1\xca\xf5\x4a\xc9\x4e\x54\x58\x4a\x85\x5d\xbd\xb7\xe1\xbd\xdd\xed\x0d\x20\x88\x2a\xaa\x7a\x7a\xc2\x92\x2b\x6d\xd0\x36\xac\xa4\xd0\x1b\xb8\x8c\x9e\xce\x5c\x30\xcd\x4b\xd6\x34\x7b\xfc\xec\xb4\x81\xea\x84\x76\x9b\xb4\x61\xca\x1c\x40\x4b\x25\x37\x2e\x7a\x45\x5b\x52\x4c\x68\x6a\xd9\x7a\x4d\x2e\xc4\x37\x6c\x45\xe0\x1a\x8b\x8e\x37\x3d\xf4\x14\x8b\xce\x56\xf3\x58\xb7\x37\x40\x29\xbb\xb6\x21\xc8\x25\x14\xfd\xbf\xe3\x8a\x36\x24\xcc\x93\x02\x8a\x56\x4c\x55\xde\x00\x18\xe2\x0b\x61\xc7\x84\x23\x00\x6b\xdb\x86\x97\xcc\x70\x29\xd0\x2a\x59\x92\xd6\xbd\x4c\xb6\x02\x9b\x22\x55\x4f\xd9\x3d\xcb\xd9\x48\xac\xc8\x20\x9d\x4e\xf0\xe6\xa0\x44\x29\x85\x61\x5c\x90\xb2\xab\x0b\x02\x5b\x34\x04\x23\xed\xb1\x80\xa2\x92\xf8\x96\xa0\xf9\x4a\xb0\x46\xa3\xe1\x6b\x42\x36\xbd\xcc\xe3\xf9\x75\xe8\x79\x93\xe9\x3c\xf2\x83\xd7\x28\x2b\xd8\x4f\xc5\x95\x60\x1b\x82\x1f\xdc\x9f\x8f\xb3\x0f\x45\x96\xdc\xcc\x2f\xe2\xaf\x67\xdf\x1f\x7c\x9c\xf8\x78\xf9\x12\xed\xae\xc2\x89\xef\x69\xd9\xa9\x92\x10\x4c\xa6\xf3\x91\xea\x44\x61\xa4\x6c\x74\xe8\x7a\xa3\x54\xc4\x0c\x15\xba\x6d\x3a\xb1\x2e\xb4\x61\xe2\x17\x83\x1f\x64\xe9\xd5\xcd\xec\x53\x31\x9d\x4d\xe2\xff\xfa\x68\xe4\x4a\x8f\x8e\x64\x08\x7b\xf8\x13\x2e\xcb\xc7\xb3\xff\x8d\x7d\xcf\xe3\x4b\x7c\xc5\xf0\x17\xfc\xe0\x43\x9e\xa7\x45\x9a\xcc\x73\x1f\xdf\xff\x63\x2b\x17\x1e\x40\x77\xad\x54\x06\x8f\x6b\x91\xff\xee\xec\xdd\x99\xef\x2d\xf9\xf1\xd6\x49\x9c\x5e\x25\xb7\x45\x7e\x9b\xc6\x7f\xb3\xf9\x68\x35\xf2\x93\x96\x44\x56\xf3\xa5\xe9\x39\x7e\x43\x3e\x8e\x3f\x8f\x8b\x3c\x49\xae\x8a\x24\xcd\xa7\xc9\x2c\x8b\xfc\xe1\x64\xc9\x1b\x0a\x49\x94\xb2\xe2\x62\x15\xdd\xe4\xef\x87\xef\x30\x9c\xfc\x64\x5b\x16\x0a\x32\x61\xab\x68\x49\x6a\x9a\x6e\xdf\x66\x86\x95\xeb\xc8\xa8\x8e\x7c\xef\x38\x2d\xc7\x9a\xa4\x79\x76\x9c\xd4\x20\x57\x7b\xd8\x97\x61\x24\x34\x11\x36\xec\x0e\x1b\xda\x48\xb5\xb7\x6d\x4d\x15\xa4\xc0\xba\x5b\x90\x12\x64\xc8\x5e\xe8\x86\x1b\xa7\xa1\xf6\x80\x8b\x64\x96\x8f\xa7\xb3\x78\x5e\x5c\xc7\xd7\xc9\xfc\xb6\x98\xce\x8a\xf3\xdb\x3c\xce\xa2\x1f\x25\x33\x18\xe9\xbd\x1e\x2d\xf5\xa8\xb4\xaf\xac\x1d\xf5\xb4\xbf\x3f\xa1\x63\x2a\xb8\x28\x16\x7b\x43\xfa\x87\x07\x68\x32\x85\x2d\xa7\x90\xad\xd1\x45\x0f\x2b\x6c\x63\xf6\x10\xf8\xc1\x3f\x9e\xd7\xab\xe7\x0a\x9c\xc4\xe7\x37\x97\xc5\x78\x7e\x99\x45\xbe\xdf\x57\xef\xdf\x05\xf7\xf3\xf8\x3a\xc9\xe3\x7e\xf5\xc1\x47\x14\xc1\xbf\x73\x12\xfd\x79\x41\x7f\xd0\x0c\xd9\x8a\x84\x69\xf8\xe2\xdf\x3f\xab\x5d\x1b\x19\xfb\x7a\x2d\x32\xaa\x4c\xa1\x65\xb9\x26\x73\xaa\x49\x6d\x49\x45\xfb\x53\xdd\xe9\x96\x44\x15\x89\x53\x56\x55\x8a\xb4\x8e\x82\xfb\x9e\xcb\xf6\xcb\x43\x9f\xe8\x45\x32\x7b\x3f\xbd\x2c\xce\xc7\x59\x6c\x9f\xc4\xa8\x3b\x7b\x33\x2a\xa5\x58\xf2\x95\x97\xdd\x5e\x5f\x4d\x67\x9f\x8a\x43\xdc\xf3\x1a\xc9\xaa\x82\x75\x4a\x2a\x56\xf4\x20\x04\x47\x28\x04\xcf\xd9\x10\x8c\x6f\xe6\xc9\x7c\x5c\x7c\x8e\xe7\xd9\x34\x99\x21\x18\xa7\xe9\xe1\xc7\xf3\x0e\x4b\xe7\x49\x1a\xcf\xf3\x69\x9c\x1d\x0a\x9d\x6c\x49\x69\x2e\x45\x14\xdc\x3f\x67\x79\x00\x86\x13\xfb\x58\x75\xcb\x4a\x8a\xbe\xf9\x41\x9a\x4c\x8a\xd9\xf8\x3a\xce\xd2\xf1\x45\xfc\xcd\xc7\x70\xd2\xca\xca\x22\x8e\x17\xbf\xf9\xbe\xe7\x95\xd5\xb1\x05\x79\x54\xd6\x12\x7e\x66\x7d\xc6\x3a\xf1\xb1\x3b\x71\x81\xe0\x75\xbb\xab\x4e\xc2\x30\x44\xf0\xba\x62\x86\x4e\x7c\xeb\xff\x5f\xc8\x76\x07\x18\x8c\x62\xad\x6d\x49\x6b\x28\xd0\x12\x3b\x42\xc9\x04\x6a\xb6\xb5\xce\x54\x91\x35\x5f\xe1\x68\x97\xc6\x5a\x94\x35\xac\x9a\x37\x15\x6a\xa6\x61\x48\x6d\xb8\x60\x86\xaa\x10\x8f\x0f\x0f\x2b\xbe\x25\x0d\x26\xbc\x01\x48\x29\xa9\x2c\x3d\x83\x90\x62\xf8\x8b\x94\x04\xdd\x71\xe3\xa8\x4f\xc1\x44\xe5\x18\x3f\x7e\xbe\x76\x61\xed\xc6\x0a\xde\xbc\xfd\x17\x76\x35\x09\x68\x12\x06\xcc\x1c\x0c\xef\x30\x25\x4a\x29\xb4\x51\x5d\x69\x50\x91\xed\x0d\xed\x4e\xb0\xd5\x72\x33\xd4\x7b\x6d\x68\xd3\x1b\x65\xd5\x6d\x16\x43\x1b\xed\xed\xf9\x60\xa2\xac\x69\x0e\xbe\x7d\x98\x77\x56\x0e\x6d\x2f\x2a\xc4\x74\x79\xc8\xc9\x1b\x58\x47\x17\xf2\xb0\x93\xaa\x53\x70\x83\x1d\x6f\x1a\x17\xb5\x29\x9f\x3a\xb0\x53\xf1\x31\xae\x3a\xd1\xd7\x66\x07\xd3\xde\xd4\x56\x3e\xb7\x58\x33\xb1\x0a\xc3\xd0\x73\xf0\x57\x4e\x88\xb3\x57\xf8\x5d\xda\x17\xa7\x75\x9f\x4b\x3f\x2d\xe8\xce\xde\x24\x37\x8d\x9d\xa3\x4a\x76\xab\xda\x5a\x48\x6d\x9d\x85\x35\x8d\xdc\x41\xd7\xb4\x60\x62\x85\x86\x0b\xd2\x76\x8c\xb9\xc9\x2a\xd5\x06\x83\x17\xa3\x4e\x2b\x37\xf3\x49\x6c\xfb\x6d\x43\xea\x3c\xf7\x8f\x8d\x4a\x3d\x74\x93\xc9\xfb\x2b\x00\x00\xff\xff\xb7\x19\x2d\xe7\x1a\x08\x00\x00")

func runBytes() ([]byte, error) {
	return bindataRead(
		_run,
		"run",
	)
}

func run() (*asset, error) {
	bytes, err := runBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "run", size: 2074, mode: os.FileMode(493), modTime: time.Unix(1492675208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _run_toolsSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6f\x73\xdb\x36\xd2\x7f\xcf\x4f\xb1\x45\xf8\xd4\x92\xc7\x34\x25\x37\x9d\x79\x6a\x87\xbd\x61\x64\x3a\x51\x2b\x89\x1a\x89\xce\x39\x97\xf1\x70\x60\x12\x92\xd1\x52\x00\x8f\x80\xe4\xd8\x8e\xbe\xfb\x0d\x08\x92\x22\x19\xc9\x97\xf4\xde\x54\xaf\x64\x60\xff\xfd\x76\x7f\x8b\x5d\x79\xb1\x66\x91\xa4\x9c\x41\x94\x11\x2c\x49\x28\xd2\x64\xcd\xfe\x0c\x85\xc4\xec\x09\x77\xba\xc6\xb3\x01\x00\x30\x9f\x8e\xae\x27\xbf\x87\xc3\xc9\xa5\x77\xe3\x20\xb3\x8f\xf2\x53\xff\x3a\x98\x5e\x07\xe1\xd5\x70\xe4\x39\xc8\x3c\x43\x75\xd1\x79\xe0\x4e\xfe\xe5\x3a\xc8\xfc\x09\x19\xf9\x39\x5d\xc0\x27\xb0\x18\x20\xb3\x6e\x0c\xc1\xed\x05\xc8\x7b\xc2\xb4\xd0\x4e\xf0\x69\x27\xa8\x4d\x21\xa8\x44\xa1\xf6\x79\x05\x43\x06\x7e\x4a\x98\xb8\xa7\x0b\xa9\xee\xe1\x9e\x0b\x09\x0c\xaf\x08\x50\x91\x1f\x08\xf5\x1d\x0b\x48\x79\x9c\x9f\x9f\x42\x70\x4f\xaa\xbf\x4e\xe0\xee\x11\x22\xce\x36\x84\xa9\x44\x9c\x94\x5a\x38\x4d\x13\x1a\xe1\x3c\x39\xb9\xb5\x05\x4f\x12\xfe\x40\xe2\x96\xff\xbb\x47\xc0\x10\x63\x71\x7f\x92\x47\x97\xeb\xc6\x24\x4d\xf8\xe3\x8a\x30\x09\x94\xc5\xe4\x73\xa5\xfb\x95\xf4\x82\x32\x9c\x24\xea\xf0\x67\x48\x88\x94\x24\x83\x0c\xb3\x98\xaf\xf2\xf8\x68\xac\x82\x5a\x50\x92\x9d\xb6\xbc\x7a\x9f\xf1\x2a\x4d\xc8\x39\xe0\x75\xc6\x33\x6c\xf1\x32\x05\x56\xc4\x99\xe0\x09\xb1\x7e\xe9\x5b\x4f\x4f\x4f\x4b\xdc\x52\xfc\x27\x81\x08\xe7\x51\x66\x64\xc1\x33\x15\x6b\x46\x37\xe4\x00\xe4\x8c\xaf\x5a\x39\xbd\x7b\x84\x8c\xac\xf8\x86\xb2\xe5\x7e\xa8\x98\xc5\xf9\x45\xca\xdb\x99\xaa\xa1\x81\xa1\x84\x07\xbe\x4e\x62\xb8\x23\x70\xa7\x71\x4b\x0e\x4b\xa2\x4b\xe8\x4e\xa7\xe1\xc4\x1d\x7b\xaa\x6a\x98\x01\xf9\xac\xe2\xa2\x12\x52\x9c\xe1\x15\x91\x24\x3b\x81\xbb\xb5\x12\xa5\x22\x47\xc3\x59\xf2\xa8\x2c\xe1\xe8\x9e\x92\x4d\x9e\xe6\x96\xef\x14\x0b\xa1\x42\xa6\x32\xb7\x09\x19\xf9\xf7\x9a\x66\x24\x06\xc2\x36\x34\xe3\x2c\x07\xb0\xc1\x19\xc5\x77\x09\x01\xaa\xcb\x78\xb9\xc3\x36\xe0\x6c\x41\x97\xd0\x79\xb8\xa7\xd1\xbd\xa2\x08\xe3\x12\x62\x22\x94\x8d\x6e\xb3\x38\x65\xf0\x8e\xd9\x21\xd1\x3d\x07\xf3\xbd\x3f\x0f\x72\x34\x5f\x40\x90\x18\xac\x0c\x2c\x02\x47\xc2\xee\x58\x9f\x7a\xd6\x2f\xb7\xcf\xfd\x93\x7e\x6f\xdb\x7d\xee\x9d\xf4\xb7\xd6\x27\x6c\x3d\xe5\x87\x3f\x6f\x4d\xdb\x5e\x1e\x75\x8d\x86\xed\x08\x4b\x78\xf3\x06\x3c\xff\x0a\x7e\x05\xb3\xd6\x80\xc6\x2b\xb0\x2c\x0b\x84\xc4\x99\xb4\x75\xf7\xc2\x3c\xb8\xf4\xaf\x03\xe3\xd3\x8a\x33\x2a\x79\x76\x6e\xdb\xa7\x76\xc2\x97\xc2\x3e\x3e\x4d\xf8\xf2\xd6\x88\xa9\x50\x68\x63\x70\x60\x81\x13\x41\x0c\xcd\xd2\x00\xd3\x04\x1c\xe8\x19\x82\xaf\xb3\x88\xc8\xc7\x94\x80\x03\x09\x5f\xbe\xfe\xc3\xd0\x25\x76\xa0\xd1\xc4\x46\xb8\x22\x12\x83\x53\xcf\xe5\xf9\xb9\x39\xf5\x2f\xf3\x3c\xcc\xa7\xee\xc0\xab\x73\xeb\xfc\xdc\x7c\x2e\x93\xb4\x05\xc6\xe3\xdc\xc7\xf9\x79\xc5\x61\x23\xa7\x9b\xb3\xcb\x5c\x81\x8e\xb0\xb8\xc0\x66\xec\xc3\xeb\x0e\x06\xde\x7c\x1e\x8e\xfc\x77\x7b\x31\xe3\x28\x22\x42\x7c\x27\x6c\xad\x14\x46\x7c\x75\x47\x19\x89\xff\xde\x09\x78\x37\x80\x43\xe0\x97\xd1\x77\x02\x5f\x46\x61\xc2\x97\x7f\x1f\xbc\x9e\x7f\x55\x75\x02\x51\xc1\xd7\xdb\x22\xef\x33\x8b\x00\x32\x9f\x1b\x43\x63\x8b\x8a\x9e\x43\xc2\x2e\x5c\xec\x1e\x4a\x75\x60\xb7\x1d\xdb\xcb\x0b\x61\x57\x20\xac\xe9\xc8\x1d\x78\xef\xfd\xd1\xa5\x37\xb3\x9b\xf8\x72\xc1\x3c\x1b\x4d\xa1\x7a\x9e\xec\x25\x6a\xb7\x69\x19\xf1\x82\x1a\x2d\x24\x15\x86\x09\x6f\xcc\x5b\x48\x33\x22\x08\x93\x27\xf0\x40\x93\x24\x7f\x77\x74\x51\x28\x2b\xe4\x4e\xf5\xe4\x5d\x50\x63\x6b\x18\xd5\x40\x17\x44\x86\x7f\xe0\x0d\x0e\x79\x2a\x45\xb8\x22\x2b\x9e\x3d\x86\xea\x41\x0f\xef\x1e\x25\x11\x9d\x2e\xa8\xd9\x3e\xf0\x27\x81\x3b\x9c\x78\xb3\x70\xec\x8d\xfd\xd9\xc7\x70\x38\x09\xdf\x7e\x0c\xbc\xb9\x63\xf6\x2f\xd4\xdb\x93\x8f\x63\x64\x1e\x94\x43\x60\x25\x12\x50\xbf\xa7\x3f\x6a\xa0\x57\x43\x3a\x23\x72\x9d\xa9\xaf\x0b\xaa\x4c\x5d\x7a\x57\xee\xf5\x28\x28\x2d\x0c\xbc\xe1\x68\x38\x79\xe7\x98\x9d\xce\xd9\xf1\xf1\xeb\x9e\xd5\xef\x76\xb5\xc3\x4e\x47\x55\xf2\xa0\xcb\x2d\x82\x5f\x1d\x25\xb1\xdf\xe0\x16\x41\xb7\x5b\x5b\x15\x5a\x51\x94\xfb\x45\x0d\xd2\x7b\xcf\x9d\x86\x53\x6f\x36\xf0\x26\x41\x6b\xcb\xd8\x2f\xe4\xf4\x4e\xff\xbf\x57\x59\xdc\x17\xe8\xf8\xad\xc2\xf5\x12\x08\xbb\xdf\x3b\x7b\x7d\x7c\x7c\x96\x83\x6e\xb9\x19\xbb\x37\xe5\xf4\x38\x90\x88\xf1\xdb\x2d\xd4\x6f\xea\xd1\xe5\xac\xc7\x0f\x7f\xc2\xd1\x33\xa4\x19\x65\x72\x01\xe8\xff\x62\x74\x02\x66\x1f\x8e\xc1\x3c\x83\xad\x1a\x2b\x06\xa8\xb9\xca\x33\x09\xbf\xb9\x1f\xdc\xd0\x9f\x06\x73\x07\x59\x37\xab\xcf\x5f\x99\x1d\xbb\x37\xdb\x15\x32\x14\xbb\x76\xf4\x4a\x38\x8e\x43\xbd\x7c\x84\x51\x3e\x1c\x0b\x46\x25\x3c\xc2\x09\xcc\x3f\x8e\x47\xc3\xc9\xef\xe1\x55\xde\x16\x8e\xd9\xaf\x6e\x06\xfe\xe4\x6a\xf8\x2e\x7c\xeb\xce\xbd\xf0\x72\x38\x73\xcc\xb3\xda\xd5\x78\x3a\xf2\x02\x2f\xfc\xe0\xcd\xe6\x43\x7f\xe2\x98\x3f\x55\x77\xea\xfd\xa8\x8e\x5f\xe7\xe1\x37\xec\xe5\xa6\x5a\xb6\x6d\x1d\xd8\x0a\xa7\xbb\xb8\xbc\xc1\xcc\x0b\xf6\x4b\x0b\x12\x65\x44\x16\x15\x55\x37\x95\xbf\xce\x82\xb2\xb8\x80\x19\x6e\x48\x26\x54\x06\x54\x9e\x9a\xf1\xaa\x92\xd4\xe2\x2c\x2a\x54\x44\xb7\xed\x96\xe4\x33\xff\x01\x3f\x38\xd0\x6b\x31\x4d\x57\x7b\xc2\x0b\xe7\xb0\xe2\x6b\x26\x49\x0c\x0b\x9e\xe9\x45\xa7\xf6\xa0\xaa\x86\xaf\x9e\x0e\xad\x58\x68\xe9\x18\xd7\x99\x5e\xe2\xa8\x80\x94\x32\x46\x62\xb5\x5c\x99\x4d\x54\xc5\x5e\x9e\x30\xb0\x44\x75\xa7\xd2\xd0\x92\x3b\x4d\x33\x9e\x92\x4c\x52\x22\xc0\x6c\x96\xd5\x26\x6c\x53\xbb\xd6\xd1\x68\x4e\xb9\xd7\x33\x7f\xe6\x86\xde\xe4\x43\x38\x9d\x79\x57\xc3\x1b\xe7\x05\x17\x07\x15\xfd\xa9\x37\x0b\x86\xea\x31\xfa\x56\xc7\xe1\xee\x34\x5c\xd0\x84\x84\x58\x84\x84\x6d\xc2\x72\xb5\x13\x80\xcc\xbd\x2e\x50\x2d\x97\xea\xe7\x81\x9e\x8d\x6a\x65\x24\x6c\x03\x3b\xf5\x07\x92\x11\xf5\xb6\x9e\x6b\x05\xb5\x90\x1d\xb2\x58\x74\xa1\x75\x75\xe4\x1c\x55\xbd\xa8\x9a\x70\x7b\x54\xbd\x1d\x05\x1f\x5f\x66\xda\xb7\x10\x6d\x47\xec\x97\x89\x56\xd1\x4c\x2b\x7c\x2f\xcd\x0a\xad\x97\x68\xd6\x84\x84\xea\x2c\xdb\x05\x69\xb7\xc4\x5e\x62\x99\xee\xcb\x97\x89\x56\x58\x2b\xb9\x76\xd8\xd1\x41\xdd\xaf\x38\xf6\xb5\xdb\xbf\xc6\x33\x6d\xbe\x68\xb7\xff\x8d\x60\x85\xa9\xff\x4e\xac\xfa\x22\xf0\x8d\x01\x37\x9e\xef\x1d\x8b\xf5\xcf\xfb\xda\xfb\x7d\xe9\x4f\x3c\x47\xef\x8f\x00\x6b\x26\x69\x02\xc8\x54\x87\x08\x2e\x62\x6e\xa8\x79\x8b\x63\x48\xe1\xcb\x17\x2d\x2a\xb3\x35\x29\x08\xa9\x16\x89\x14\x81\xe3\xc0\x31\x72\xd0\x31\xfc\xf8\xa3\x3e\xf8\xc1\x01\xf4\x0a\x1d\xc3\xed\xad\x01\x35\xa6\xea\x22\x29\x09\xa3\x58\x98\x62\xce\x08\xbc\x01\x64\xb6\xe2\x43\x0d\xc0\x7b\x5a\x48\x83\x3b\x34\x65\xfa\xe5\xd5\xd4\x0d\x06\xef\x77\xe7\x67\x46\x73\xc6\x8c\xfc\x81\x1b\x14\x73\xc9\x80\xb1\xfb\x9b\x3f\xab\x75\xae\xfe\xb1\xd7\x30\x51\x15\xea\x14\x8e\x9e\xcb\x2a\xa9\xe9\x0b\xe3\xe1\xe4\x2f\x29\xa3\x53\x64\x9e\xe5\xf3\x1b\x0a\xb1\xb9\xa3\xb6\xb3\x26\xa4\xb6\x25\xb3\xe1\x0e\xcc\x46\xe8\x90\x60\x49\x84\xcc\x09\xaa\x5e\x81\xf2\xd5\xa1\x0c\xca\xb8\x4a\x57\xdd\x0b\xc8\x4b\x5c\x6e\x51\x8b\xdd\x84\x2b\x73\xb3\xb5\xcd\xc2\x40\xbd\xa5\x6f\x73\xa5\xc6\x7f\x6f\xb4\xe5\x42\xb6\x3a\xd5\xcb\xda\x85\x51\xed\xc8\xaa\xe4\x46\x79\x0e\x56\xdf\xd8\x1a\xff\x09\x00\x00\xff\xff\x44\xae\x61\xef\xb4\x12\x00\x00")

func run_toolsShBytes() ([]byte, error) {
	return bindataRead(
		_run_toolsSh,
		"run_tools.sh",
	)
}

func run_toolsSh() (*asset, error) {
	bytes, err := run_toolsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "run_tools.sh", size: 4788, mode: os.FileMode(420), modTime: time.Unix(1492675208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"liveness_std.sh": liveness_stdSh,
	"readiness_std.sh": readiness_stdSh,
	"run": run,
	"run_tools.sh": run_toolsSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"liveness_std.sh": &bintree{liveness_stdSh, map[string]*bintree{}},
	"readiness_std.sh": &bintree{readiness_stdSh, map[string]*bintree{}},
	"run": &bintree{run, map[string]*bintree{}},
	"run_tools.sh": &bintree{run_toolsSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

